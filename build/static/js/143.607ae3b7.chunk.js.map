{"version":3,"sources":["views/apps/astrochat/Customvideo.js","views/apps/astrochat/VideoAstro.js"],"names":["i","Customvideo","options","channelParameters","localAudioTrack","localVideoTrack","remoteAudioTrack","remoteVideoTrack","remoteUid","agoraEngine","AgoraRTC","createClient","mode","codec","remotePlayerContainer","document","createElement","localPlayerContainer","id","textContent","style","width","height","padding","on","user","mediaType","console","log","subscribe","videoTrack","audioTrack","uid","toString","body","append","play","window","onload","getElementById","onclick","alert","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","close","removeVideoDiv","leave","elementId","Div","remove","startBasicCall","Button","color","className","type","VideoAstro","useState","videoCall","setVideoCall","channelname","setchannel","view","setview","callbacks","EndCall","useEffect","astroid","localStorage","getItem","axiosConfig","get","then","res","data","catch","err","response","Card","Row","Col","onClick","history","goBack","cursor","lg","sm","md","Input","value","name","placeholder","onChange","e","target","post","channelName","handleSubmit","display","rtcProps","appId","channel","token","role"],"mappings":"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","file":"static/js/143.607ae3b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Customvideo = () => {\r\n  let options = {\r\n    // Pass your App ID here.\r\n    appId: \"7d1f07c76f9d46be86bc46a791884023\",\r\n    // Set the channel name.\r\n    channel: \"anujesh\",\r\n    // Pass your temp token here.\r\n    token:\r\n      \"007eJxTYHA9L/ardLdxnIT0sYYQL7n4flZlrj73fael711KneCyapYCg3mKYZqBebK5WZpliolZUqqFWVKyiVmiuaWhhYWJgZHxb26vlIZARoYumUfMjAwQCOKzMyTmlWalFmcwMAAAAhUecg==\",\r\n    // Set the user ID.\r\n    uid: 0,\r\n    // Set the user role\r\n    role: \"\",\r\n  };\r\n  let channelParameters = {\r\n    // A variable to hold a local audio track.\r\n    localAudioTrack: null,\r\n    // A variable to hold a local video track.\r\n    localVideoTrack: null,\r\n    // A variable to hold a remote audio track.\r\n    remoteAudioTrack: null,\r\n    // A variable to hold a remote video track.\r\n    remoteVideoTrack: null,\r\n    // A variable to hold the remote user id.s\r\n    remoteUid: null,\r\n  };\r\n  async function startBasicCall() {\r\n    // Create an instance of the Agora Engine\r\n\r\n    const agoraEngine = AgoraRTC.createClient({ mode: \"rtc\", codec: \"vp8\" });\r\n    // Dynamically create a container in the form of a DIV element to play the remote video track.\r\n    const remotePlayerContainer = document.createElement(\"div\");\r\n    // Dynamically create a container in the form of a DIV element to play the local video track.\r\n    const localPlayerContainer = document.createElement(\"div\");\r\n    // Specify the ID of the DIV container. You can use the uid of the local user.\r\n    localPlayerContainer.id = options.uid;\r\n    // Set the textContent property of the local video container to the local user id.\r\n    localPlayerContainer.textContent = \"Local user \" + options.uid;\r\n    // Set the local video container size.\r\n    localPlayerContainer.style.width = \"840px\";\r\n    localPlayerContainer.style.height = \"480px\";\r\n    localPlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Set the remote video container size.\r\n    remotePlayerContainer.style.width = \"840px\";\r\n    remotePlayerContainer.style.height = \"480px\";\r\n    remotePlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Listen for the \"user-published\" event to retrieve a AgoraRTCRemoteUser object.\r\n    agoraEngine.on(\"user-published\", async (user, mediaType) => {\r\n      console.log(\"subscribe success\", user, mediaType);\r\n\r\n      // Subscribe to the remote user when the SDK triggers the \"user-published\" event.\r\n      await agoraEngine.subscribe(user, mediaType);\r\n      console.log(\"subscribe success\");\r\n      // Subscribe and play the remote video in the container If the remote user publishes a video track.\r\n      if (mediaType == \"video\") {\r\n        // Retrieve the remote video track.\r\n        channelParameters.remoteVideoTrack = user.videoTrack;\r\n        // Retrieve the remote audio track.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Save the remote user id for reuse.\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        // Specify the ID of the DIV container. You can use the uid of the remote user.\r\n        remotePlayerContainer.id = user.uid.toString();\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        remotePlayerContainer.textContent =\r\n          \"Remote user \" + user.uid.toString();\r\n        // Append the remote container to the page body.\r\n        document.body.append(remotePlayerContainer);\r\n        // Play the remote video track.\r\n        channelParameters.remoteVideoTrack.play(remotePlayerContainer);\r\n      }\r\n      // Subscribe and play the remote audio track If the remote user publishes the audio track only.\r\n      if (mediaType == \"audio\") {\r\n        // Get the RemoteAudioTrack object in the AgoraRTCRemoteUser object.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Play the remote audio track. No need to pass any DOM element.\r\n        channelParameters.remoteAudioTrack.play();\r\n      }\r\n      // Listen for the \"user-unpublished\" event.\r\n      agoraEngine.on(\"user-unpublished\", (user) => {\r\n        console.log(user.uid + \"has left the channel\");\r\n      });\r\n    });\r\n    window.onload = function () {\r\n      // Listen to the Join button click event.\r\n      document.getElementById(\"join\").onclick = async function () {\r\n        console.log(options.appId, options.channel, options.token, options.uid);\r\n        // Join a channel.\r\n        if (options.channel) {\r\n          alert(\"user Want to join You\");\r\n        }\r\n        await agoraEngine.join(\r\n          options.appId,\r\n          options.channel,\r\n          options.token,\r\n          options.uid\r\n        );\r\n        // Create a local audio track from the audio sampled by a microphone.\r\n        channelParameters.localAudioTrack =\r\n          await AgoraRTC.createMicrophoneAudioTrack();\r\n        // Create a local video track from the video captured by a camera.\r\n        channelParameters.localVideoTrack =\r\n          await AgoraRTC.createCameraVideoTrack();\r\n        // Append the local video container to the page body.\r\n        document.body.append(localPlayerContainer);\r\n        // Publish the local audio and video tracks in the channel.\r\n        await agoraEngine.publish([\r\n          channelParameters.localAudioTrack,\r\n          channelParameters.localVideoTrack,\r\n        ]);\r\n        // Play the local video track.\r\n        channelParameters.localVideoTrack.play(localPlayerContainer);\r\n        console.log(\"publish success!\");\r\n      };\r\n      // Listen to the Leave button click event.\r\n      document.getElementById(\"leave\").onclick = async function () {\r\n        // Destroy the local audio and video tracks.\r\n        channelParameters.localAudioTrack.close();\r\n        channelParameters.localVideoTrack.close();\r\n        // Remove the containers you created for the local video and remote video.\r\n        removeVideoDiv(remotePlayerContainer.id);\r\n        removeVideoDiv(localPlayerContainer.id);\r\n        // Leave the channel\r\n        await agoraEngine.leave();\r\n        console.log(\"You left the channel\");\r\n        // Refresh the page for reuse\r\n        // window.location.reload();\r\n      };\r\n    };\r\n  }\r\n  startBasicCall();\r\n  // Remove the video stream from the container.\r\n  function removeVideoDiv(elementId) {\r\n    console.log(\"Removing \" + elementId + \"Div\");\r\n    let Div = document.getElementById(elementId);\r\n    if (Div) {\r\n      Div.remove();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"success\" id=\"join\">\r\n        Join\r\n      </Button>\r\n      <button className=\"mx-1 btn btn-danger\" type=\"button\" id=\"leave\">\r\n        Leave\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customvideo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Input, Row } from \"reactstrap\";\r\nimport AgoraUIKit from \"agora-react-uikit\";\r\nimport \"./../../../assets/scss/video.scss\";\r\nimport Customvideo from \"./Customvideo\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport { history } from \"../../../history\";\r\n\r\nconst VideoAstro = () => {\r\n  const [videoCall, setVideoCall] = useState(false);\r\n  const [channelname, setchannel] = useState(\"\");\r\n  const [view, setview] = useState(false);\r\n  const [listofchannel, setlistofchannel] = useState();\r\n\r\n  const rtcProps = {\r\n    // Pass your App ID here.\r\n    appId: \"7d1f07c76f9d46be86bc46a791884023\",\r\n    // Set the channel name.\r\n    channel: \"anujesh\",\r\n    // Pass your temp token here.\r\n    token:\r\n      \"007eJxTYGDa4maqVP+s4+G3uCl1Ajd6budsjz63fv9KUYPn7F+ispcoMJinGKYZmCebm6VZppiYJaVamCUlm5glmlsaWliYGBgZf5zmn9IQyMhwbqo3IyMDBIL47AyJeaVZqcUZDAwAEmUiBQ==\",\r\n    // Set the user ID.\r\n    uid: 0,\r\n    // Set the user role\r\n    role: \"\",\r\n  };\r\n  const callbacks = {\r\n    EndCall: () => setVideoCall(false),\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    const astroid = localStorage.getItem(\"astroId\");\r\n\r\n    axiosConfig\r\n      .post(`/user/add_VideoChannel`, {\r\n        astroid: astroid,\r\n        channelName: channelname,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const astroid = localStorage.getItem(\"astroId\");\r\n    console.log(astroid);\r\n    axiosConfig\r\n      // .get(`/user/getoneChannl/644fae265f6b65e11a4bdbd7`)\r\n      .get(`user/channelList/${astroid}`)\r\n      .then((res) => {\r\n        console.log(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"d-flex justify-content-end container mt-2\">\r\n              <div>\r\n                <Button\r\n                  onClick={() => {\r\n                    history.goBack();\r\n                    // history.push(\"/uploads\");\r\n                  }}\r\n                  color=\"primary\"\r\n                >\r\n                  {\" \"}\r\n                  Back\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <div className=\"d-flex justify-content-center mb-2 mt-1\">\r\n          <h2>Videocalls</h2>\r\n        </div>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"container chenell mx-1 mb-1 mt-1\">\r\n              <div className=\"cchannel\">\r\n                <Button\r\n                  onClick={() => setview(true)}\r\n                  className=\"\"\r\n                  color=\"success\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  Create Channel\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          {view === true ? (\r\n            <>\r\n              <Col lg=\"4\" sm=\"4\" md=\"4\">\r\n                <div className=\"container mt-1 mb-1\">\r\n                  <Input\r\n                    value={channelname}\r\n                    className=\"form-control  \"\r\n                    id=\"textbox\"\r\n                    name=\"city\"\r\n                    placeholder=\"create channel\"\r\n                    onChange={(e) => {\r\n                      setchannel(e.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Col>\r\n              <Col lg=\"4\" sm=\"4\" md=\"4\">\r\n                <div className=\"container mt-1 mb-1\">\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      handleSubmit(e);\r\n                      setview(false);\r\n                    }}\r\n                    color=\"success\"\r\n                  >\r\n                    Add Channel\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </>\r\n          ) : null}\r\n        </Row>\r\n        <Row>\r\n          <div className=\"container mt-1 mb-1\">\r\n            {videoCall ? (\r\n              <div style={{ display: \"flex\", width: \"75vw\", height: \"80vh\" }}>\r\n                <AgoraUIKit rtcProps={rtcProps} callbacks={callbacks} />\r\n              </div>\r\n            ) : (\r\n              <Button onClick={() => setVideoCall(true)} color=\"success\">\r\n                Add call\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Row>\r\n        <Row>\r\n          <div className=\"container mt-1 mb-1\">\r\n            <Customvideo channelname={channelname} />\r\n          </div>\r\n        </Row>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoAstro;\r\n"],"sourceRoot":""}